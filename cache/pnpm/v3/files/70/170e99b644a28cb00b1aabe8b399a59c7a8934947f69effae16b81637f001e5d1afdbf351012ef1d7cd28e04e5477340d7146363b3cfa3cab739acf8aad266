(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('styled-components'), require('react/jsx-runtime'), require('framer-motion'), require('react-router-dom')) :
  typeof define === 'function' && define.amd ? define(['exports', 'styled-components', 'react/jsx-runtime', 'framer-motion', 'react-router-dom'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CoreUi = {}, global.styled, global.jsxRuntime, global["framer-motion"], global["react-router-dom"]));
})(this, (function (exports, styled, jsxRuntime, framerMotion, reactRouterDom) { 'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var styled__default = /*#__PURE__*/_interopDefaultLegacy(styled);

  const Avatar = styled__default["default"].img`
  width: 50px;
  height: 50px;
  border-radius: 50%;
`;

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  const CoreButton = styled__default["default"](framerMotion.motion.button)`
  color: ${({
  theme
}) => theme.color.primary};

  border: none;

  background-color: transparent;

  padding: 0.8rem 1.1rem;
  border-radius: 4px;
  /* transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, border-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,
    color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms; */
  transition: all 0.3s ease;
  font-size: ${({
  size
}) => {
  return `${size || '1.05'}rem`;
}} !important;
  font-weight: 500;
  cursor: pointer;
  position: relative;
  overflow: hidden;

  /* line-height: 1.75; */

  @media screen and (max-width: 600px) {
    font-size: ${({
  size
}) => {
  const digit = parseInt(size || '1.15');
  return (digit / 1.15).toString() + 'rem';
}};
  }

  &[disabled] {
    background-color: ${({
  theme
}) => theme.text.third} !important;
    color: black !important;
    cursor: not-allowed;
    outline: none;
    border: none;
  }
`;

  const ContainedButton = styled__default["default"](CoreButton)`
  color: black;

  background-color: ${({
  theme
}) => theme.color.primary};
  &:hover {
    background-color: ${({
  theme
}) => theme.color.primaryHover};
  }
`;

  const colorTypes$1 = {
    error: 'rgba(200, 50, 50, 1)',
    warn: 'rgb(255,255,0)'
  };
  const OutlinedButton = styled__default["default"](CoreButton)`
  --color: ${({
  theme,
  color
}) => {
  if (color) {
    return colorTypes$1[color];
  }

  return theme.color.secondary;
}};

  color: var(--color);
  border: 1px solid var(--color);
  border: 1px solid var(--color);

  &:hover {
    background-color: ${({
  theme
}) => theme.background.secondary};
  }
`;

  const TextButton = styled__default["default"](CoreButton)`
  &:hover {
    background-color: ${({
  theme
}) => {
  return theme.color.secondaryHover;
}};
  }
`;

  const colorTypes = {
    error: 'rgba(200, 50, 50, 1)',
    warn: 'rgb(255,255,0)'
  };
  const HoverOutlinedButton = styled__default["default"](CoreButton)`
  position: relative;

  --color: ${({
  theme,
  color
}) => {
  if (color) {
    return colorTypes[color];
  }

  return theme.color.secondary;
}};

  color: var(--color);

  &::after,
  &::before {
    content: '';
    position: absolute;
    width: 0;
    height: 0;
    transition: all 0.4s ease-in-out;
    opacity: 0;
  }

  &::after {
    bottom: 0;
    right: 0;
    border-bottom: 2px solid var(--color);
    border-right: 2px solid var(--color);
  }

  &::before {
    top: 0;
    left: 0;
    border-top: 2px solid var(--color);
    border-left: 2px solid var(--color);
  }

  &:hover::after,
  &:hover::before {
    width: calc(100% - 2px);
    height: calc(100% - 2px);

    /* width: 15px;
    height: 15px; */

    transition: all 0.4s ease-in-out, opacity 0.2s border-radius 0s 0.4s;
    opacity: 1;
  }
`;

  const NoStyleButton = styled__default["default"].button`
  outline: initial;
  border: initial;
  color: initial;
  background: none;
  font-size: initial;
  text-align: initial;
  cursor: pointer;
`;

  function Button(_a) {
    var {
      variant = 'contained',
      children,
      noStyle = false
    } = _a,
        props = __rest(_a, ["variant", "children", "noStyle"]);

    if (noStyle) {
      return jsxRuntime.jsx(NoStyleButton, Object.assign({}, props, {
        children: children
      }));
    }

    switch (variant) {
      case 'text':
        return jsxRuntime.jsx(TextButton, Object.assign({}, props, {
          children: children
        }));

      case 'contained':
        return jsxRuntime.jsx(ContainedButton, Object.assign({}, props, {
          children: children
        }));

      case 'hover-outlined':
        return jsxRuntime.jsx(HoverOutlinedButton, Object.assign({}, props, {
          children: children
        }));

      case 'outlined':
        return jsxRuntime.jsx(OutlinedButton, Object.assign({}, props, {
          children: children
        }));

      default:
        return jsxRuntime.jsx(ContainedButton, Object.assign({}, props, {
          children: children
        }));
    }
  }

  const Card = styled__default["default"](framerMotion.motion.div)`
  padding: ${({
  padding = '1'
}) => `${padding}rem`};
  display: flex;
  flex-direction: column;

  cursor: pointer;

  position: relative;

  width: ${props => props.width};
  height: ${props => props.height};

  box-shadow: 1px 1px 6px rgba(0, 0, 0, 0.2);
  border-radius: 5px;

  background-color: ${({
  theme
}) => theme.background.secondary};

  transition: all 0.3s ease;

  ${({
  noHover
}) => !noHover && styled.css`
      &:hover {
        background-color: ${({
  theme
}) => theme === null || theme === void 0 ? void 0 : theme.background.third};
      }
    `}
`;

  const Divider = styled__default["default"].div`
  background-color: ${({
  theme = {}
}) => {
  var _a;

  return (_a = theme === null || theme === void 0 ? void 0 : theme.background) === null || _a === void 0 ? void 0 : _a.third;
}};
  height: 1px;
  margin: 0 auto;

  margin-block: 2rem;
  ${({
  marginUnder = true
}) => marginUnder ? null : styled.css`
          margin-bottom: 0;
        `}
  width: ${({
  width
}) => width || '97.5%'};
`;

  const Input = styled__default["default"].input`
  padding: 0.9rem;
  border-radius: 7.5px;
  border: 2px solid ${({
  theme
}) => theme.background.third};
  appearance: none;
  background: ${({
  theme
}) => theme.background.secondary};
  font-size: 1.1rem;
  color: ${({
  theme
}) => theme.text.third};
`;

  const StyledLink = styled__default["default"](reactRouterDom.Link)`
  color: ${({
  theme
}) => theme.color.primary};
  text-decoration: none;
  position: relative;
  z-index: ${({
  zIndexOver
}) => zIndexOver ? '9999 !important' : '999 !important'};
  width: 100%;

  ${({
  line = false,
  theme
}) => line && styled.css`
      --padding: -3px;
      &::after {
        content: '';
        height: 5px;
        position: absolute;
        bottom: 0;
        right: var(--padding);
        background-color: ${theme.color.accent};
        transition: height 0.5s;
        z-index: -1 !important;
        width: calc(100% - var(--padding) * 2) !important;
      }
      &:hover::after {
        height: 100%;
        transition: height 0.5s;
      }
    `}
  ${({
  icon
}) => icon ? styled.css`
          &::after {
            width: calc(100% - 24px + 5px);
            right: -5px;
          }
        ` : styled.css`
          &::after {
            width: 100%;
          }
        `}
`;
  const StyledA = styled__default["default"](framerMotion.motion.a)`
  color: ${({
  theme
}) => theme.color.primary};
  text-decoration: none;
  position: relative;
  z-index: ${({
  zIndexOver = false
}) => zIndexOver ? '9999 !important' : '999 !important'};
  width: 100%;

  ${({
  line = false,
  theme
}) => line && styled.css`
      --padding: -3px;
      &::after {
        content: '';
        height: 5px;
        position: absolute;
        bottom: 0;
        right: var(--padding);
        background-color: ${theme.color.accent};
        transition: height 0.5s;
        z-index: -1 !important;
        width: calc(100% - var(--padding) * 2) !important;
      }
      &:hover::after {
        height: 100%;
        transition: height 0.5s;
      }
    `}
  ${({
  icon
}) => icon ? styled.css`
          &::after {
            width: calc(100% - 24px + 5px);
            right: -5px;
          }
        ` : styled.css`
          &::after {
            width: 100%;
          }
        `}
`;
  const CustomRow = styled__default["default"].span`
  display: inline;
  width: auto !important;
  & > .material-symbols-outlined {
    color: transparent !important;
    transition: color 0.25s ease;
  }

  &:hover > .material-symbols-outlined {
    color: #9aa09a !important;
    transition: color 0.25s ease 0.25s;
  }

  ${({
  icon
}) => icon && styled.css`
      & > a {
        position: relative;
        transition: left 0.25s ease 0.3s;
        left: 0px;
        &:hover {
          left: 28px;
          transition: left 0.25s ease;
        }
      }
    `}
`;
  const Icon = styled__default["default"].i`
  position: absolute;
`;
  const Link = _a => {
    var {
      children,
      external = false,
      to = '#',
      icon = false
    } = _a,
        props = __rest(_a, ["children", "external", "to", "icon"]);

    return !external ? jsxRuntime.jsxs(CustomRow, Object.assign({
      icon: icon
    }, {
      children: [icon && jsxRuntime.jsx(Icon, Object.assign({
        className: "material-symbols-outlined"
      }, {
        children: "link"
      })), jsxRuntime.jsx(StyledLink, Object.assign({}, props, {
        to: to
      }, {
        children: children
      }))]
    })) : jsxRuntime.jsxs(CustomRow, Object.assign({
      icon: icon
    }, {
      children: [icon && jsxRuntime.jsx(Icon, Object.assign({
        className: "material-symbols-outlined"
      }, {
        children: "link"
      })), jsxRuntime.jsx(StyledA, Object.assign({
        href: to
      }, props, {
        target: "_blank"
      }, {
        children: children
      }))]
    }));
  };

  const test$1 = {
    center: 'center',
    top: 'flex-start',
    bottom: 'flex-end'
  };
  const Col = styled__default["default"](framerMotion.motion.div)`
  display: flex;
  flex-direction: column;
  justify-content: ${({
  align = 'top'
}) => {
  return test$1[align];
}};
  /* justify-content: space-between; */
  ${({
  gap = '1'
}) => gap !== 'auto' ? styled.css`
          gap: ${gap}rem !important;
        ` : null};
  padding: ${({
  padding = '0'
}) => `${padding}rem`};
`;

  const Background = styled__default["default"](framerMotion.motion.div)`
  z-index: 999999999;
  background-color: rgba(0, 0, 0, 0.5);
  position: fixed;
  inset: 0 0 0 0;
  display: grid;
  place-items: center;
`;
  const Inner = styled__default["default"](framerMotion.motion.div)`
  padding: 1.5rem;
  background-color: ${({
  theme
}) => theme.background.primary};
  border-radius: 10px;
  width: ${({
  width = '10'
}) => `${width}rem`};
  max-width: 85vw;
`;
  function Modal({
    isOpen,
    children,
    width,
    gap = '1'
  }) {
    return jsxRuntime.jsx(framerMotion.AnimatePresence, {
      children: isOpen ? jsxRuntime.jsx(Background, Object.assign({
        initial: {
          opacity: 0
        },
        animate: {
          opacity: isOpen ? 1 : 0
        },
        exit: {
          opacity: 0
        }
      }, {
        children: jsxRuntime.jsx(Inner, Object.assign({
          width: width,
          initial: {
            scale: 0.95,
            opacity: 0
          },
          animate: {
            scale: 1,
            opacity: 1
          },
          exit: {
            scale: 1.05,
            opacity: 0
          },
          transition: {
            duration: 0.25
          }
        }, {
          children: jsxRuntime.jsx(Col, Object.assign({
            gap: gap
          }, {
            children: children
          }))
        }))
      })) : null
    });
  }

  const Text = styled__default["default"](framerMotion.motion.p)`
  color: ${({
  theme
}) => theme.text.secondary};
  text-align: ${({
  align = 'left'
}) => align};
  ${({
  restrictWidth,
  width = '75'
}) => {
  return restrictWidth ? styled.css`
          max-width: ${width}ch;
        ` : null;
}}

  ${({
  bold
}) => {
  if (bold) {
    return styled.css`
        font-weight: 500;
      `;
  } else {
    return null;
  }
}}


  width: auto;
`;

  const Title = styled__default["default"](framerMotion.motion.h1)`
  font-family: 'Roboto';
  font-weight: 600;
  font-size: ${props => (props.size || '2') + 'rem'};
  color: ${({
  theme
}) => theme.text.primary};

  text-align: ${({
  align
}) => {
  return align || 'left';
}};

  @media screen and (max-width: 500px) {
    font-size: ${props => {
  const digit = parseInt(props.size || '2');
  return (digit / 1.5).toString() + 'rem';
}};
  }
`;

  const test = {
    center: 'center',
    right: 'flex-end',
    left: 'flex-start'
  };
  const Row = styled__default["default"](framerMotion.motion.div)`
  display: ${({
  inline = false
}) => inline ? 'inline-flex' : 'flex'};
  flex-direction: row;

  justify-content: ${({
  align = 'left'
}) => test[align]};
  ${({
  gap = 'auto'
}) => gap === 'auto' ? styled.css`
          justify-content: space-between;
        ` : styled.css`
          gap: ${gap}rem !important;
        `};
  padding: ${({
  padding = '0'
}) => `${padding}rem`};
`;

  const StyledCode = styled__default["default"].code`
  color: gray;
  padding: ${({
  padding = '0.5rem'
}) => padding};
  display: inline-block;
  background: rgba(0, 0, 0, 0.3);
  border-radius: 0.4rem;
`;
  function Code({
    children,
    padding
  }) {
    return jsxRuntime.jsx(StyledCode, Object.assign({
      padding: padding
    }, {
      children: children
    }));
  }

  const ButtonContainer = styled__default["default"](Row)`
  display: flex;
  gap: 1rem !important;
  align-items: center;
`;

  exports.Avatar = Avatar;
  exports.Button = Button;
  exports.ButtonContainer = ButtonContainer;
  exports.Card = Card;
  exports.Code = Code;
  exports.Col = Col;
  exports.Divider = Divider;
  exports.Input = Input;
  exports.Link = Link;
  exports.Modal = Modal;
  exports.Row = Row;
  exports.Text = Text;
  exports.Title = Title;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
