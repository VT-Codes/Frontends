"use strict";
exports.__esModule = true;
exports.sortedOAuthProviders = exports.getOAuthProviderData = exports.OAUTH_PROVIDERS = void 0;
exports.OAUTH_PROVIDERS = [
    {
        provider: 'google',
        strategy: 'oauth_google',
        name: 'Google',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/social-login-google'
    },
    {
        provider: 'discord',
        strategy: 'oauth_discord',
        name: 'Discord',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/discord'
    },
    {
        provider: 'facebook',
        strategy: 'oauth_facebook',
        name: 'Facebook',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/social-login-facebook'
    },
    {
        provider: 'twitch',
        strategy: 'oauth_twitch',
        name: 'Twitch',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/twitch'
    },
    {
        provider: 'twitter',
        strategy: 'oauth_twitter',
        name: 'Twitter',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/twitter'
    },
    {
        provider: 'microsoft',
        strategy: 'oauth_microsoft',
        name: 'Microsoft',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/microsoft'
    },
    {
        provider: 'tiktok',
        strategy: 'oauth_tiktok',
        name: 'TikTok',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/tiktok'
    },
    {
        provider: 'linkedin',
        strategy: 'oauth_linkedin',
        name: 'LinkedIn',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/linkedin'
    },
    {
        provider: 'github',
        strategy: 'oauth_github',
        name: 'GitHub',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/github'
    },
    {
        provider: 'gitlab',
        strategy: 'oauth_gitlab',
        name: 'GitLab',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/gitlab'
    },
    {
        provider: 'dropbox',
        strategy: 'oauth_dropbox',
        name: 'Dropbox',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/dropbox'
    },
    {
        provider: 'bitbucket',
        strategy: 'oauth_bitbucket',
        name: 'Bitbucket',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/bitbucket'
    },
    {
        provider: 'hubspot',
        strategy: 'oauth_hubspot',
        name: 'HubSpot',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/hubspot'
    },
    {
        provider: 'notion',
        strategy: 'oauth_notion',
        name: 'Notion',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/notion'
    },
    {
        provider: 'apple',
        strategy: 'oauth_apple',
        name: 'Apple',
        docsUrl: 'https://docs.clerk.dev/reference/social-login-reference/apple'
    },
];
function getOAuthProviderData(_a) {
    var provider = _a.provider, strategy = _a.strategy;
    if (provider) {
        return exports.OAUTH_PROVIDERS.find(function (oauth_provider) { return oauth_provider.provider == provider; });
    }
    return exports.OAUTH_PROVIDERS.find(function (oauth_provider) { return oauth_provider.strategy == strategy; });
}
exports.getOAuthProviderData = getOAuthProviderData;
function sortedOAuthProviders(sortingArray) {
    return exports.OAUTH_PROVIDERS.slice().sort(function (a, b) {
        var aPos = sortingArray.indexOf(a.strategy);
        if (aPos == -1) {
            aPos = Number.MAX_SAFE_INTEGER;
        }
        var bPos = sortingArray.indexOf(b.strategy);
        if (bPos == -1) {
            bPos = Number.MAX_SAFE_INTEGER;
        }
        return aPos - bPos;
    });
}
exports.sortedOAuthProviders = sortedOAuthProviders;
//# sourceMappingURL=oauth.js.map