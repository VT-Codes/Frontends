"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withModuleFederation = void 0;
const tslib_1 = require("tslib");
const webpack_utils_1 = require("./webpack-utils");
const devkit_1 = require("@nrwl/devkit");
const typescript_1 = require("@nrwl/workspace/src/utilities/typescript");
const file_utils_1 = require("nx/src/project-graph/file-utils");
const ModuleFederationPlugin = require("webpack/lib/container/ModuleFederationPlugin");
function recursivelyResolveWorkspaceDependents(projectGraph, target, seenTargets = new Set()) {
    var _a;
    if (seenTargets.has(target)) {
        return [];
    }
    let dependencies = [target];
    seenTargets.add(target);
    const workspaceDependencies = ((_a = projectGraph.dependencies[target]) !== null && _a !== void 0 ? _a : []).filter((dep) => !dep.target.startsWith('npm:'));
    if (workspaceDependencies.length > 0) {
        for (const dep of workspaceDependencies) {
            dependencies = [
                ...dependencies,
                ...recursivelyResolveWorkspaceDependents(projectGraph, dep.target, seenTargets),
            ];
        }
    }
    return dependencies;
}
function mapWorkspaceLibrariesToTsConfigImport(workspaceLibraries) {
    var _a, _b;
    const { projects } = new devkit_1.Workspaces(devkit_1.workspaceRoot).readWorkspaceConfiguration();
    const tsConfigPath = (_a = process.env.NX_TSCONFIG_PATH) !== null && _a !== void 0 ? _a : (0, typescript_1.getRootTsConfigPath)();
    const tsConfig = (0, typescript_1.readTsConfig)(tsConfigPath);
    const tsconfigPathAliases = (_b = tsConfig.options) === null || _b === void 0 ? void 0 : _b.paths;
    if (!tsconfigPathAliases) {
        return workspaceLibraries;
    }
    const mappedLibraries = [];
    for (const lib of workspaceLibraries) {
        const sourceRoot = projects[lib].sourceRoot;
        let found = false;
        for (const [key, value] of Object.entries(tsconfigPathAliases)) {
            if (value.find((p) => p.startsWith(sourceRoot))) {
                mappedLibraries.push(key);
                found = true;
                break;
            }
        }
        if (!found) {
            mappedLibraries.push(lib);
        }
    }
    return mappedLibraries;
}
function getDependentPackagesForProject(name) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let projectGraph;
        try {
            projectGraph = (0, devkit_1.readCachedProjectGraph)();
        }
        catch (e) {
            projectGraph = yield (0, devkit_1.createProjectGraphAsync)();
        }
        const deps = projectGraph.dependencies[name].reduce((dependencies, dependency) => {
            const workspaceLibraries = new Set(dependencies.workspaceLibraries);
            const npmPackages = new Set(dependencies.npmPackages);
            if (dependency.target.startsWith('npm:')) {
                npmPackages.add(dependency.target.replace('npm:', ''));
            }
            else {
                workspaceLibraries.add(dependency.target);
            }
            return {
                workspaceLibraries: [...workspaceLibraries],
                npmPackages: [...npmPackages],
            };
        }, { workspaceLibraries: [], npmPackages: [] });
        const seenWorkspaceLibraries = new Set();
        deps.workspaceLibraries = deps.workspaceLibraries.reduce((workspaceLibraryDeps, workspaceLibrary) => [
            ...workspaceLibraryDeps,
            ...recursivelyResolveWorkspaceDependents(projectGraph, workspaceLibrary, seenWorkspaceLibraries),
        ], []);
        deps.workspaceLibraries = mapWorkspaceLibrariesToTsConfigImport(deps.workspaceLibraries);
        return deps;
    });
}
function determineRemoteUrl(remote) {
    var _a, _b, _c, _d, _e, _f;
    const workspace = (0, file_utils_1.readWorkspaceJson)();
    const serveTarget = (_b = (_a = workspace.projects[remote]) === null || _a === void 0 ? void 0 : _a.targets) === null || _b === void 0 ? void 0 : _b.serve;
    if (!serveTarget) {
        throw new Error(`Cannot automatically determine URL of remote (${remote}). Looked for property "host" in the project's "serve" target.\n
      You can also use the tuple syntax in your webpack config to configure your remotes. e.g. \`remotes: [['remote1', '//localhost:4201']]\``);
    }
    const host = (_d = (_c = serveTarget.options) === null || _c === void 0 ? void 0 : _c.host) !== null && _d !== void 0 ? _d : '//localhost';
    const port = (_f = (_e = serveTarget.options) === null || _e === void 0 ? void 0 : _e.port) !== null && _f !== void 0 ? _f : 4201;
    return `${host.endsWith('/') ? host.slice(0, -1) : host}:${port}/remoteEntry.js`;
}
function mapRemotes(remotes) {
    const mappedRemotes = {};
    for (const remote of remotes) {
        if (Array.isArray(remote)) {
            let [remoteName, remoteLocation] = remote;
            if (!remoteLocation.match(/remoteEntry\.(js|mjs)$/)) {
                remoteLocation = `${remoteLocation.endsWith('/')
                    ? remoteLocation.slice(0, -1)
                    : remoteLocation}/remoteEntry.js`;
            }
            mappedRemotes[remoteName] = remoteLocation;
        }
        else if (typeof remote === 'string') {
            mappedRemotes[remote] = determineRemoteUrl(remote);
        }
    }
    return mappedRemotes;
}
function withModuleFederation(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const reactWebpackConfig = require('../../plugins/webpack');
        const ws = (0, file_utils_1.readWorkspaceJson)();
        const project = ws.projects[options.name];
        if (!project) {
            throw Error(`Cannot find project "${options.name}". Check that the name is correct in module-federation.config.js`);
        }
        const dependencies = yield getDependentPackagesForProject(options.name);
        const sharedLibraries = (0, webpack_utils_1.shareWorkspaceLibraries)(dependencies.workspaceLibraries);
        const npmPackages = (0, webpack_utils_1.sharePackages)(dependencies.npmPackages);
        const sharedDependencies = Object.assign(Object.assign({}, sharedLibraries.getLibraries()), npmPackages);
        if (options.shared) {
            for (const [libraryName, library] of Object.entries(sharedDependencies)) {
                const mappedDependency = options.shared(libraryName, library);
                if (mappedDependency === false) {
                    delete sharedDependencies[libraryName];
                    continue;
                }
                else if (!mappedDependency) {
                    continue;
                }
                sharedDependencies[libraryName] = mappedDependency;
            }
        }
        return (config) => {
            config = reactWebpackConfig(config);
            config.output.uniqueName = options.name;
            config.output.publicPath = 'auto';
            config.optimization = {
                runtimeChunk: false,
                minimize: false,
            };
            config.experiments = Object.assign(Object.assign({}, config.experiments), { outputModule: true });
            const mappedRemotes = !options.remotes || options.remotes.length === 0
                ? {}
                : mapRemotes(options.remotes);
            config.plugins.push(new ModuleFederationPlugin({
                name: options.name,
                library: {
                    type: 'module',
                },
                filename: 'remoteEntry.js',
                exposes: options.exposes,
                remotes: mappedRemotes,
                shared: Object.assign({}, sharedDependencies),
            }), sharedLibraries.getReplacementPlugin());
            return config;
        };
    });
}
exports.withModuleFederation = withModuleFederation;
//# sourceMappingURL=with-module-federation.js.map